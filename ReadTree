#!/usr/bin/env python3
"""Makes a README file for a given directory"""
__appname__ = "MakeReadme.py"
__author__ = "Joseph Palmer <joseph.palmer18@imperial.ac.uk>"
__version__ = "0.0.1"
__license__ = "License for this code/"

## imports ##
import sys
import os
import subprocess
import ast
from datetime import datetime

## Functions ##
def GetPyDocStr(f): 
    """GetPyDocStr - Gets the docstring from a given python script.

    :param f: The python file provided.
    """
    try:
        with open("Code/" + f, "r") as filename:
            tree = ast.parse(filename.read())
        return (f, ast.get_docstring(tree))
    # use bare except here as python error could be any error at this stage.
    except:
        exit("There is a problem with the python script '{}'"
             "\nUnable to create README until this is fixed."
             "\nRun this code to check the error.".format(f))

def GetShDocStr(f):
    """GetShDocStr - Gets the docstring from a given Shell script.

    :param f: The shell script provided.
    """
    hosts_process = subprocess.Popen(["grep", "Desc", "Code/{}".format(f)],
            stdout = subprocess.PIPE)
    hosts_out, hosts_err = hosts_process.communicate()
    formated = str(hosts_out).split(": ")[-1].replace("\\n", " ")
    return formated

def GetRDocStr(f):
    """GetShDocStr - Gets the docstring from a given R script.

    :param f: The R script provided.
    """
    hosts_process = subprocess.Popen(["grep", "Desc", "Code/{}".format(f)],
            stdout = subprocess.PIPE)
    hosts_out, hosts_err = hosts_process.communicate()
    formated = str(hosts_out).split(": ")[-1].replace("\\n", " ")
    return formated

def GetLatexTitle(f):
    """GetShDocStr - Gets the Title from a given latex file.

    :param f: The latex script provided.
    """
    hosts_process = subprocess.Popen(["grep", "title{", "Code/{}".format(f)],
            stdout = subprocess.PIPE)
    hosts_out, hosts_err = hosts_process.communicate()
    formated = str(hosts_out).split("{")[-1].replace("\\n", " ").replace("}", "")
    return formated

def main(argv):
    """main - Where the magic happens!

    :param argv:
    """
    # Get the name of the directory the code is ran.
    dirname = os.path.basename(os.getcwd())

    # Get description from previous README.md files, if they exist
    if os.path.exists("README.md"):
        with open("README.md", "r") as prev_readme:
            data = "".join([i for i in prev_readme.readlines()])
        prev_desc = data.split("Description: ")[-1].split("### Tree map")[0]
    else:
        prev_desc = "[Enter description for project here]\n"

    # Read the tree into a temporary README document.
    # - Need to get ignore files from gitignore
    ignore = open("../.gitignore").read()
    gitignore = "|".join([i.strip() for i in ignore.split("\n")
                          if "#" not in i])
    dirignore = "|__pycache__"
    ignore = "tree -I '{}{}' > README.tmp".format(gitignore,
                                                  dirignore).replace("||", "|")
    os.system(ignore)

    # Read the README file.
    with open("README.tmp", "r") as myfile:
        data = myfile.read()

    # remove the README.tmp file
    os.system("rm README.tmp")

    # --- get the documentation for all the files in Code. ---

    ## Python ##

    # Make tuple of filename and docstring, replace filename in data with
    # filename and description.
    codelist_py = [GetPyDocStr(item) for item in os.listdir("Code/")
                   if item.endswith(".py")]
    for i in codelist_py:
        data = data.replace(i[0], "{} : {}".format(i[0],
                                                   i[-1].replace("\n", " ")))

    ## Shell ##

    # Make tuple of filename and docstring, replace filename in data
    # with filename and description.
    codelist_sh = [item for item in os.listdir("Code/")
                   if item.endswith(".sh")]
    for i in codelist_sh:
        data = data.replace(i, "{} : {}".format(i, GetShDocStr(i)))

    ## R ##
    codelist_R = [item for item in os.listdir("Code/")
                  if item.endswith(".R")]
    for i in codelist_R:
        data = data.replace(i, "{} : {}".format(i, GetRDocStr(i)))

    ## Latex ##
    codelist_latex = [item for item in os.listdir("Code/")
                      if item.endswith(".tex")]
    for i in codelist_latex:
        data = data.replace(i, "{} : {}".format(i, GetLatexTitle(i)))

    # Write the file
    introstring = ("# README Document for CMEECourseWork {}\n"
                   "## Author: Joseph Palmer - "
                   "_joseph.palmer18@imperial.ac.uk_\n"
                   "## Date: _{}_\n\n"
                   "### Description: {}"
                   "\n### Tree map\n"
                   "```\n{}\n```".format(dirname,
                                         datetime.now().strftime('%h - %Y'),
                                         prev_desc,
                                         data))

    with open("README.md", "w") as writer:
        writer.write("{}\n".format(introstring))

    return 0


## Run the code ##
if __name__ == "__main__":
    status = main(sys.argv)
    print("README.md Created in Current Working Directory.")
    sys.exit(status)
